---
import { UNCATEGORIZED } from '@constants/constants'
import I18nKey from '../i18n/i18nKey'
import { i18n } from '../i18n/translation'
import { getPostUrlBySlug } from '../utils/url-utils'
import type { Post } from '@/types/posts'
import { GET as getPosts } from "@/pages/api/posts/fetchAllPosts"
import { Icon } from "astro-icon/components";

interface Props {
  keyword?: string
  tags?: string[]
  categories?: string[]
}
const { tags, categories } = Astro.props

const initResponse = await getPosts(Astro);
const response = await initResponse.json();

let postList: Post[] = []

if (response.success === true) {
    postList = response.result
}

let posts: [string, Post][] = []

for (const rkey in postList) {
  posts.push([rkey, postList[rkey]])
}

if (Array.isArray(tags) && tags.length > 0) {
  posts = posts.filter(
    post =>
      Array.isArray(post[1].extendedData?.tags) &&
      post[1].extendedData?.tags.some((tag: string) => tags.includes(tag)),
  )
}

if (Array.isArray(categories) && categories.length > 0) {
  posts = posts.filter(
    post =>
      (post[1].extendedData?.category && categories.includes(post[1].extendedData?.category)) ||
      (!post[1].extendedData?.category && categories.includes(UNCATEGORIZED)),
  )
}

// @ts-ignore
const groups: { year: number; posts: typeof posts }[] = (() => {
  const groupedPosts: { [year: number]: typeof posts } = {}; // Explicit type for groupedPosts

  for (const post of posts)  {
    const publishedDate = new Date(post[1].extendedData?.published ?? 0);
    if (Number.isNaN(publishedDate.getTime())) return;

    const year = publishedDate.getFullYear();
    if (!groupedPosts[year]) {
      groupedPosts[year] = [];
    }
    groupedPosts[year].push(post);
  };

  const groupedPostsArray = Object.keys(groupedPosts).map(key => {
    const year = Number.parseInt(key);
    groupedPosts[year].sort((a, b) =>
      new Date(b[1].extendedData?.published ?? 0).getTime() - new Date(a[1].extendedData?.published ?? 0).getTime()
    );
    return { year, posts: groupedPosts[year] };
  });

  return groupedPostsArray.sort((a, b) => b.year - a.year);
})();

function formatDate(date: Date) {
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const day = (date.getDate() + 1).toString().padStart(2, '0')
  return `${month}-${day}`
}

function formatTag(tag: string[]) {
  return tag.map(t => `#${t}`).join(' ')
}
---

<div class="card-base px-8 py-6">
    {
        groups.map(group => (
            <div>
                <div class="flex flex-row w-full items-center h-[3.75rem]">
                    <div class="w-[15%] md:w-[10%] transition text-2xl font-bold text-right text-75">{group.year}</div>
                    <div class="w-[15%] md:w-[10%]">
                        <div class="h-3 w-3 bg-none rounded-full outline outline-[var(--primary)] mx-auto -outline-offset-[2px] z-50 outline-3"></div>
                    </div>
                    <div class="w-[70%] md:w-[80%] transition text-left text-50">{group.posts.length} {i18n(I18nKey.postsCount)}</div>
                </div>
                {group.posts.map(post => (
                    <a href={getPostUrlBySlug(post[0])}
                       aria-label={post[1].title}
                       class="group btn-plain !block h-10 w-full rounded-lg hover:text-[initial]"
                    >
                        <div class="flex flex-row justify-start items-center h-full">
                            <!-- date -->
                            <div class="w-[15%] md:w-[10%] transition text-sm text-right text-50">
                                {formatDate(new Date(post[1].extendedData?.published ?? 0))}
                            </div>
                            <!-- dot and line -->
                            <div class="w-[15%] md:w-[10%] relative dash-line h-full flex items-center">
                                <div class="transition-all mx-auto w-1 h-1 rounded group-hover:h-5
                                bg-[oklch(0.5_0.05_var(--hue))] group-hover:bg-[var(--primary)]
                                outline outline-4 z-50
                                outline-[var(--card-bg)]
                                group-hover:outline-[var(--btn-plain-bg-hover)]
                                group-active:outline-[var(--btn-plain-bg-active)]
                                "
                                ></div>
                            </div>
                            <!-- post title -->
                            <div class="w-[70%] md:max-w-[65%] md:w-[65%] text-left font-bold
                                group-hover:translate-x-1 transition-all group-hover:text-[var(--primary)]
                                text-75 pr-8 whitespace-nowrap overflow-ellipsis overflow-hidden"
                            >
                                {post[1].extendedData?.pinned &&
                                    <Icon class="inline-block text-[1rem] text-[var(--primary)] mr-1 align-middle translate-y-[-1px]" name="material-symbols:push-pin" />
                                }
                                    {post[1].extendedData?.title}
                            </div>
                            <!-- tag list -->
                            <div class="hidden md:block md:w-[15%] text-left text-sm transition
                            whitespace-nowrap overflow-ellipsis overflow-hidden
                            text-30"
                            >{formatTag(post[1].extendedData?.tags ?? [])}</div>
                        </div>
                    </a>
                ))}
            </div>
        ))
    }
</div>
